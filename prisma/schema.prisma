datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
 id            String          @id @default(cuid())
  name          String?
  username      String @unique
  surname       String?
  email         String?          @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  completedOnboarding Boolean @default(false)
  accounts      Account[]
  sessions      Session[]
  createdWorkspaces Workspace[] @relation("CreatedBy")
  subscriptions Subscription[]
  useCase UseCase?
}

 
model Account {
  id                String @id @default(cuid())
  userId            String @unique
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
 
model Session {
  id String @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

enum UserPermission {
  ADMIN
  CAN_EDIT
  READ_ONLY
}

enum UseCase {
  WORK
  STUDY
  PERSONAL_USE
}


model Workspace{
  id String @id @default(cuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId String?
  creator User? @relation("CreatedBy" , fields: [creatorId], references: [id] , onDelete: Cascade)
  subscribers Subscription[]
  image String?

  @@index([creatorId])
} 

model Subscription{
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  userRole UserPermission @default(READ_ONLY)

  @@id([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
}  